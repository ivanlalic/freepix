{"version":3,"sources":["components/error.jsx","components/form.jsx","components/image.jsx","components/list.jsx","App.js","serviceWorker.js","index.js"],"names":["Error","message","className","Form","setSearch","useState","tag","setTag","error","setError","onSubmit","e","preventDefault","trim","type","placeholder","onChange","target","value","Image","image","largeImageURL","likes","previewURL","tags","views","src","alt","href","rel","List","images","map","key","id","App","search","setImages","actualpage","setActualPage","totalpages","setTotalPages","useEffect","a","imagesPerPage","URL","fetch","answer","json","result","hits","calculateTotalPages","Math","ceil","totalHits","document","querySelector","scrollIntoView","behavior","callAPI","onClick","newActualPage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.e667fd0a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Error = ({message}) => {\r\n    return ( \r\n        <p className=\"my-3 p-4 text-center alert alert-primary\">{message}</p>\r\n     );\r\n}\r\n \r\nexport default Error;","import React, {useState} from 'react';\r\nimport Error from './error';\r\n\r\n\r\nconst Form = ({setSearch}) => {\r\n\r\n    //States\r\n    const [tag, setTag] = useState('');\r\n    const [error, setError] = useState(false);\r\n\r\n    const searchImage = e => {\r\n        e.preventDefault();\r\n\r\n        //Validate\r\n        if(tag.trim() === '') {\r\n            setError(true);\r\n            return;\r\n        }\r\n        setError(false);\r\n        //Send tag to main component\r\n        setSearch(tag);\r\n\r\n\r\n    };\r\n\r\n    return ( \r\n        <form\r\n            onSubmit={searchImage}\r\n        >\r\n            <div className=\"row\">\r\n                <div className=\"form-group col-md-8\">\r\n                    <input \r\n                        type=\"text\"\r\n                        className=\"form-control form-control-lg\"\r\n                        placeholder=\"Search an image\"\r\n                        onChange={e => setTag(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group col-md-4\">\r\n                    <input \r\n                        type=\"submit\"\r\n                        className=\"btn btn-lg btn-danger btn-block\"\r\n                        value=\"Search\"\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            { error ? <Error message=\"Add a search tag\"/> : null}\r\n\r\n        </form>\r\n\r\n     );\r\n}\r\n \r\nexport default Form;","import React from 'react'\r\n\r\nconst Image = ({image}) => {\r\n\r\n    //Extract from image\r\n\r\n    const { largeImageURL, likes, previewURL, tags, views } = image;\r\n\r\n    return ( \r\n        <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-4\">\r\n            <div className=\"card\">\r\n                <img src={previewURL} alt={tags} className=\"card-img-top\" />\r\n\r\n                <div className=\"card-body\">\r\n                    <p className=\"card-text\">{likes} Likes</p>\r\n                    <p className=\"card-text\">{views} Views</p>\r\n                </div>\r\n\r\n                <div className=\"card-footer\">\r\n                    <a href={largeImageURL} target=\"_blank\" rel=\"noopenner norefferer\" className=\"btn btn-primary btn-block\">View Image</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Image;","import React from 'react';\r\nimport Image from './image';\r\n\r\nconst List = ({images}) => {\r\n    return ( \r\n        <div className=\"col-12 p5 row\">\r\n            {images.map(image => (\r\n                <Image \r\n                    key={image.id}\r\n                    image={image}\r\n                />\r\n            ) )}\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default List;","import React, {useState, useEffect} from 'react';\nimport Form from './components/form';\nimport List from './components/list';\n\nfunction App() {\n\n  //States\n  const [search, setSearch] = useState('');\n  const [images, setImages] = useState([]);\n  const [actualpage, setActualPage] = useState(1); //start from page 1\n  const [totalpages, setTotalPages] = useState(1); //at least you have 1 page always \n\n\n\n  //useEffect to call API when user add a search tag\n\n  useEffect( ()=> {\n    const callAPI = async () => {\n\n      if(search === '') return; //avoid call API if tag is empty, when load page\n\n      const imagesPerPage = 30;\n      const key = '17880079-27cce7dc00c09652002621953';\n      const URL = `https://pixabay.com/api/?key=${key}&q=${search}&per_page=${imagesPerPage}&page=${actualpage}`;\n\n      const answer = await fetch(URL);\n      const result = await answer.json();\n      \n      setImages(result.hits);\n\n      //Calc totalpages\n      const calculateTotalPages = Math.ceil(result.totalHits / imagesPerPage);\n      setTotalPages(calculateTotalPages);\n\n      //Move screen to top\n      const jumbotron = document.querySelector('.jumbotron'); //Select where to go\n      jumbotron.scrollIntoView({ behavior: 'smooth' }); //aply method scrollintoview and behavior so when reload DOM because\n      //of page change or api call, it goes to the top(.jumbotron)\n\n    }\n    callAPI();\n  }, [actualpage, search] )\n\n  //Define previous page\n  const prevPage = () => { // its the actual minus 1 page\n    const newActualPage = actualpage - 1; \n    setActualPage(newActualPage);\n\n    if(newActualPage === 0) return; // To avoid negative page \n  }\n\n  //Define next page\n  const nextPage = () => {\n    const newActualPage = actualpage + 1; \n    setActualPage(newActualPage);\n\n    if(newActualPage > totalpages) return; // To avoid going to more pages than total\n  }\n\n\n\n  return (\n    <div className=\"container\">\n      <div className=\"jumbotron\">\n        <p className=\"lead text-center\">Image finder</p>\n        <Form \n          setSearch={setSearch}\n        />\n      </div>\n      <div className=\"row justify-content-center\">\n        <List \n          images={images}\n        />\n\n        { (actualpage === 1) ? null : (\n          <button\n          type=\"button\"\n          className=\"btn btn-info mr-1\"\n          onClick={prevPage}\n          >&laquo; Prev </button>\n        ) }\n\n        { (actualpage === totalpages) ? null : (\n          <button\n          type=\"button\"\n          className=\"btn btn-info\"\n          onClick={nextPage}\n          >Next &raquo;</button>\n        ) }\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}